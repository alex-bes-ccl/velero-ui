pipeline {
    agent any

    environment {
        evGit_Source_Code = 'https://github.com/seriohub/velero-ui'
        evDocker_HUB = "${env.DEFAULT_DOCKER_REGISTRY}"
        evDocker_Project = "${env.DOCKER_AUTHOR}"
        evDocker_HUB_Credentials = credentials('DEFAULT_DOCKER_CREDENTIALS')
        evTarget = 'velero-ui'
        evLatestTag = 'dev'
        evCommitChangeset = ''
    }
    stages {
        stage('Clone Git Repository') {
            steps {
                script {
                    echo 'Clone Git repository...'
                    checkout([$class: "GitSCM", branches: [[name: "*/dev"]], userRemoteConfigs: [[url: evGit_Source_Code]]])
                    GIT_TAG = evLatestTag
                    evCommitChangeset = sh(returnStdout: true, script: "git log -1 --pretty='%s'").trim()
                }
            }
        }

        stage('Build Docker Image and Push to Registry') {
            steps {
                script {
                    def dockerfilePath = 'docker/Dockerfile'
                    def dockerHubProject = "${evDocker_Project}/${evTarget}"

                    if (evDocker_HUB) {
                        def urlWithoutProtocol = evDocker_HUB.replaceAll('^https?://', '')
                        dockerHubProject = "${urlWithoutProtocol}/${evDocker_Project}/${evTarget}"
                    }
                    
                    def now = new Date()
                    echo "Docker registry: ${evDocker_HUB}"
                    def pushTo = evDocker_HUB ?: ''

                    sh "echo ${evDocker_HUB_Credentials_PSW} | docker login -u ${evDocker_HUB_Credentials_USR} --password-stdin ${pushTo}"

                    echo "Build Docker Image ${dockerHubProject}:${GIT_TAG} -"
                    sh "docker build --target base -f ${dockerfilePath} ."
                    sh "docker build --target deps -f ${dockerfilePath} ."
                    sh "docker build --target builder -f ${dockerfilePath} ."
                    sh "docker build --build-arg VERSION=dev --build-arg BUILD_DATE=${now.format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone('UTC'))} --target ${evTarget} -t ${dockerHubProject}:${GIT_TAG} -f ${dockerfilePath} --push ."
                    sh "docker logout"
                }
            }
        }
    }
    post {
        always {
            script {
                def pipelineName = currentBuild.fullProjectName
                def message = currentBuild.resultIsBetterOrEqualTo('SUCCESS') 
                    ? "Jenkins Pipeline ${pipelineName} : Your image version ${evLatestTag} has been successfully pushed to the Docker Registry.\nCommit changes:\n ${evCommitChangeset}" 
                    : "Jenkins Pipeline ${pipelineName}: Build failed"

                def url = "https://api.telegram.org/bot${env.TELEGRAM_TOKEN}/sendMessage"
                def payload = [
                    chat_id: "${env.TELEGRAM_CHAT_ID}",
                    text: message
                ]

                def response = httpRequest(
                    url: url,
                    httpMode: 'POST',
                    contentType: 'APPLICATION_JSON',
                    requestBody: groovy.json.JsonOutput.toJson(payload)
                )

                if (response.status == 200) {
                    echo 'Telegram message sent successfully'
                } else {
                    error "Failed to send Telegram message. Status code: ${response.status}"
                }
            }
        }
    }
}
