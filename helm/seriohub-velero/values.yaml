api:
  apiServer:
    image:
      repository: docker.io/dserio83/velero-api
      tag: 0.1.6
    imagePullPolicy: IfNotPresent
  ports:
  - name: velero-api
    port: 80
    protocol: TCP
    targetPort: api
  replicas: 1
  type: ClusterIP
apiConfig:
  apiEnableDocumentation: "1"
  apiEndpointPort: "8001"
  apiEndpointUrl: 0.0.0.0
  apiRateLimiterCustom1: Security:xxx:60:20
  apiRateLimiterL1: "60:20"
  apiTokenExpirationMin: "30"
  awsAccessKeyId: <AWS_ACCESS_KEY_ID>
  awsSecretAccessKey: <AWS_SECRET_ACCESS_KEY>
  debugLevel: info
  downloadTmpFolder: /tmp/velero-api
  k8SInClusterMode: "True"
  k8SVeleroNamespace: velero
  #k8SVeleroUiNamespace: velero-ui
  origins1: '*'
  resticPassword: static-passw0rd
  securityDisableUsersPwdRate: "1"
  securityPathDatabase: ./data
  securityTokenKey: <your-token>
  veleroCliDestPath: /usr/local/bin
  veleroCliPath: ./velero-client
  veleroCliPathCustom: ./velero-client-binary
  veleroCliVersion: v1.12.2
apiNp:
  ports:
  - nodePort: 30001
    port: 8001
    targetPort: api
  type: NodePort
apiSa:
  serviceAccount:
    annotations: {}
kubernetesClusterDomain: cluster.local
ui:
  ports:
  - name: velero-ui
    port: 80
    protocol: TCP
    targetPort: run
  replicas: 1
  type: ClusterIP
  webserver:
    image:
      repository: docker.io/dserio83/velero-ui
      tag: 0.1.6
    imagePullPolicy: IfNotPresent
uiConfig:
  nextPublicRefreshDatatableAfter: "1500"
  nextPublicRefreshRecent: "5000"
  nextPublicVeleroApiUrl: http://10.10.0.100
  nextPublicVeleroApiWs: ws://10.10.0.100
uiNp:
  ports:
  - nodePort: 30002
    port: 3000
    targetPort: run
  type: NodePort
